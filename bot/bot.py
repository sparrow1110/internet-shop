import os
from datetime import datetime
import requests
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from bot.bot_utils import (
    save_token, get_token, delete_token, create_main_keyboard,
    create_pagination_keyboard, create_products_keyboard, create_profile_keyboard,
    get_products, get_orders, BASE_URL, BASE_DIR, CATEGORIES
)
import logging
from urllib.parse import urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

MEDIA_ROOT = BASE_DIR / 'media'
BOT_TOKEN = os.environ['BOT_TOKEN']
bot = telebot.TeleBot(BOT_TOKEN)


user_states = {}


def ensure_user_state(chat_id):
    if chat_id not in user_states:
        user_states[chat_id] = {}
        logging.info(f"Initialized user_states for user {chat_id}")


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    ensure_user_state(chat_id)
    markup = create_main_keyboard(message.chat.id)
    bot.send_message(message.chat.id, "üè¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ModaHouse! –ù–∞–∂–º–∏—Ç–µ '–ö–∞—Ç–∞–ª–æ–≥' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤.",
                     reply_markup=markup)
    logging.info(f"User {message.chat.id} started bot")


@bot.message_handler(commands=['catalog'])
def show_categories(message):
    chat_id = message.chat.id
    ensure_user_state(chat_id)
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [KeyboardButton(cat['name']) for cat in CATEGORIES]
    markup.add(*buttons)
    markup.add(KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    bot_message = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    user_states[chat_id] = {'last_message_ids': [bot_message.message_id]}
    logging.info(f"Displayed categories for user {chat_id}")


def show_products(chat_id, category_slug, page=1):
    user_states[chat_id] = {'category_slug': category_slug, 'page': page, 'last_message_ids': [], 'last_products': []}

    data = get_products(category_slug, page)
    if not data:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    products = data['results']

    if not products:
        message = bot.send_message(chat_id, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        user_states[chat_id]['last_message_ids'] = [message.message_id]
        logging.info(f"No products found for category {category_slug}, page {page}")
        return

    pagination_markup = create_pagination_keyboard(data, category_slug, page)
    choice_markup, message_text = create_products_keyboard(products, page)

    user_states[chat_id]['last_products'].extend(products)

    products_message = bot.send_message(chat_id, message_text, reply_markup=pagination_markup)
    choice_message = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥:", reply_markup=choice_markup)
    user_states[chat_id]['last_message_ids'] = [products_message.message_id, choice_message.message_id]
    logging.info(f"Displayed products for category {category_slug}, page {page} for user {chat_id}")


def show_product_details(chat_id, pk):
    try:
        response = requests.get(f"{BASE_URL}/api/v1/products/{pk}/")
        response.raise_for_status()
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Failed to fetch product {pk}: {e}")
        return

    product = response.json()
    sell_price = product['sell_price'] if float(product['discount']) > 0.0 else product['price']
    caption = f"{product['name']}\n–¶–µ–Ω–∞: {sell_price} $\n–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}"

    try:
        if product['image']:
            parsed_url = urlparse(product['image'])
            image_path = parsed_url.path.split('/media/', 1)[-1]
            full_image_path = MEDIA_ROOT / image_path
            logging.info(f"Attempting to send local image: {full_image_path}")

            if os.path.exists(full_image_path):
                with open(full_image_path, 'rb') as photo:
                    bot.send_photo(chat_id, photo, caption=caption)
                logging.info(f"Sent local photo for product {pk} to user {chat_id}")
            else:
                not_found_image_path = BASE_DIR / 'static' / 'images' / 'Not found image.png'
                with open(not_found_image_path, 'rb') as photo:
                    bot.send_photo(chat_id, photo, caption=caption)
                logging.info(f"Sent not-found image for product {pk} to user {chat_id}")
        else:
            bot.send_message(chat_id, f"{caption}\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
            logging.info(f"Sent text for product {pk} (no image) to user {chat_id}")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        logging.error(f"Failed to send product {pk} image: {e}")

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"))
    bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–í–æ–π—Ç–∏")
def request_login(message):
    chat_id = message.chat.id
    ensure_user_state(chat_id)
    token = get_token(chat_id)
    if token:
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return
    user_states[chat_id] = {'state': 'awaiting_credentials'}
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: user123 password123):")
    logging.info(f"User {chat_id} requested login")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('state') == 'awaiting_credentials')
def handle_credentials(message):
    chat_id = message.chat.id
    try:
        login, password = message.text.split()
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    try:
        response = requests.post(f"{BASE_URL}/auth/token/login/", json={'username': login, 'password': password})
        response.raise_for_status()
        data = response.json()
        token = data.get('auth_token')
        if token:
            save_token(chat_id, token)
            user_states[chat_id] = {}  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            keyboard = create_main_keyboard(chat_id)
            bot.send_message(chat_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=keyboard)
            logging.info(f"User {chat_id} logged in successfully")
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
            logging.error(f"Login failed for user {chat_id}: no token in response")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logging.error(f"Login error for user {chat_id}: {e}")


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    chat_id = message.chat.id
    ensure_user_state(chat_id)
    token = get_token(chat_id)
    if not token:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏' –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    try:
        headers = {'Authorization': f'Token {token}'}
        response = requests.get(f"{BASE_URL}/auth/users/me/", headers=headers)
        response.raise_for_status()
        user_data = response.json()
        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë©‚Äçüíº –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data['username']}\n"
            f"üìß Email: {user_data['email']}\n"
            f"üßë –ò–º—è: {user_data['first_name']}\n"
            f"üë™ –§–∞–º–∏–ª–∏—è: {user_data['last_name']}"
        )
        markup = create_profile_keyboard()
        bot.send_message(chat_id, profile_text, reply_markup=markup)
        logging.info(f"Displayed profile for user {chat_id}")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Profile fetch error for user {chat_id}: {e}")


@bot.message_handler(func=lambda message: message.text == "–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞")
def show_cart(message):
    chat_id = message.chat.id
    ensure_user_state(chat_id)
    token = get_token(chat_id)
    if not token:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏' –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    try:
        headers = {'Authorization': f'Token {token}'}
        response = requests.get(f"{BASE_URL}/api/v1/cart/", headers=headers)
        response.raise_for_status()
        cart_data = response.json()
        items = cart_data.get('items', [])
        total_quantity = cart_data.get('total_quantity', 0)
        total_amount = cart_data.get('total_amount', 0)

        if not items:
            bot.send_message(chat_id, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        message_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        for item in items:
            product = item['product']
            message_text += (
                f"üõç –¢–æ–≤–∞—Ä: {product['name']}\n"
                f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} x {product['sell_price']} $ = {item['total_price']} $\n\n"
            )
        message_text += f"‚û°Ô∏è –ò—Ç–æ–≥–æ: {total_quantity} —Ç–æ–≤–∞—Ä(–∞) –Ω–∞ —Å—É–º–º—É {total_amount} $"

        markup = create_profile_keyboard()
        bot.send_message(chat_id, message_text, reply_markup=markup)
        logging.info(f"Displayed cart for user {chat_id}")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Cart fetch error for user {chat_id}: {e}")


@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def show_orders(message):
    chat_id = message.chat.id
    ensure_user_state(chat_id)
    token = get_token(chat_id)
    if not token:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏' –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    try:
        orders = get_orders(token)
        if not orders:
            bot.send_message(chat_id, "üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        message_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:\n\n"
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        for order in orders:
            date = datetime.fromisoformat(order['created_timestamp'].replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
            message_text += (
                f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order['id']}\n"
                f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {date}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {'–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' if order['payment_on_get'] else '–û–Ω–ª–∞–π–Ω'}\n"
                f"üí≤ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order['total_amount']} $\n\n"
            )
            markup.add(KeyboardButton(f"–ó–∞–∫–∞–∑ ‚Ññ{order['id']}"))

        markup.add(KeyboardButton("–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

        message = bot.send_message(chat_id, message_text, reply_markup=markup)
        user_states[chat_id]['last_message_ids'] = [message.message_id]
        logging.info(f"Displayed orders for user {chat_id}")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Orders fetch error for user {chat_id}: {e}")


@bot.message_handler(func=lambda message: message.text.startswith("–ó–∞–∫–∞–∑ ‚Ññ"))
def show_order_details(message):
    chat_id = message.chat.id
    ensure_user_state(chat_id)
    token = get_token(chat_id)
    if not token:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏' –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    order_id = message.text.split("–ó–∞–∫–∞–∑ ‚Ññ")[1]
    try:
        headers = {'Authorization': f'Token {token}'}
        response = requests.get(f"{BASE_URL}/api/v1/orders/{order_id}/", headers=headers)
        response.raise_for_status()
        order = response.json()
        date = datetime.fromisoformat(order['created_timestamp'].replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')
        message_text = (
            f"üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order['id']}:\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {date}\n"
            f"üöö –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞: {'–î–∞' if order['requires_delivery'] else '–ù–µ—Ç'}\n"
            f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {'–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' if order['payment_on_get'] else '–û–Ω–ª–∞–π–Ω'}\n"
            f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if order['is_paid'] else '–ù–µ—Ç'}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"üí≤ –û–±—â–∞—è —Å—É–º–º–∞: {order['total_amount']} $\n\n"
            f"üõç –¢–æ–≤–∞—Ä—ã:\n"
        )
        for item in order['items']:
            message_text += (
                f"- {item['name']}\n"
                f"  {item['quantity']} x {item['price']} $ = {item['total_price']} $\n\n"
            )

        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(KeyboardButton("–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(chat_id, message_text, reply_markup=markup)
        logging.info(f"Displayed order {order_id} details for user {chat_id}")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Order {order_id} fetch error for user {chat_id}: {e}")


@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
def back_to_profile(message):
    show_profile(message)


@bot.message_handler(func=lambda message: message.text == "–í—ã–π—Ç–∏")
def logout(message):
    chat_id = message.chat.id
    ensure_user_state(chat_id)
    token = get_token(chat_id)
    if not token:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    try:
        headers = {'Authorization': f'Token {token}'}
        response = requests.post(f"{BASE_URL}/auth/token/logout/", headers=headers)
        response.raise_for_status()
        delete_token(chat_id)
        keyboard = create_main_keyboard(chat_id)
        bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", reply_markup=keyboard)
        logging.info(f"User {chat_id} logged out")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Logout error for user {chat_id}: {e}")


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    ensure_user_state(chat_id)
    if message.text == "–ö–∞—Ç–∞–ª–æ–≥":
        show_categories(message)
    elif message.text == "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥":
        user_states[chat_id]['last_products'] = []
        show_categories(message)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤":
        if chat_id in user_states:
            state = user_states[chat_id]
            show_products(chat_id, state['category_slug'], state['page'])
    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        keyboard = create_main_keyboard(chat_id)
        bot.send_message(chat_id, "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
    elif message.text in [cat['name'] for cat in CATEGORIES]:
        category = next((cat for cat in CATEGORIES if cat['name'] == message.text), None)
        if category:
            show_products(chat_id, category['slug'], 1)
            logging.info(f"User {chat_id} selected category: {category['name']}")
    elif message.text.startswith("–í—ã–±—Ä–∞—Ç—å: "):
        try:
            product_name = message.text.split("–í—ã–±—Ä–∞—Ç—å: ")[1]
            if chat_id in user_states and 'last_products' in user_states[chat_id]:
                product = next((p for p in user_states[chat_id]['last_products']
                                if p['name'] == product_name), None)
                if product:
                    show_product_details(chat_id, product['pk'])
                    logging.info(f"User {chat_id} selected product {product['pk']}")
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            logging.error(f"Error in product selection for user {chat_id}: {e}")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    ensure_user_state(chat_id)
    if call.data.startswith("page_"):
        parts = call.data.split('_')
        slug = parts[1]
        page = int(parts[2])
        if chat_id in user_states and 'last_message_ids' in user_states[chat_id]:
            for message_id in user_states[chat_id]['last_message_ids']:
                try:
                    bot.delete_message(chat_id, message_id)
                except Exception as e:
                    logging.error(f"Failed to delete message {message_id}: {e}")
        show_products(chat_id, slug, page)
        bot.answer_callback_query(call.id)
        logging.info(f"User {chat_id} navigated to page {page} in category {slug}")


if __name__ == '__main__':
    logging.info("Starting bot")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

